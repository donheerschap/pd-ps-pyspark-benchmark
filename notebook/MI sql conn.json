{
	"name": "MI sql conn",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "benchmark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2d3ee318-90e5-43a1-b365-1af01260093d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a0a34ac7-898e-46ac-9b16-78e6808067c7/resourceGroups/rg-ldemo-xgn-d-euw-01/providers/Microsoft.Synapse/workspaces/synw-ldemo-xgn-d-euw-01/bigDataPools/benchmark",
				"name": "benchmark",
				"type": "Spark",
				"endpoint": "https://synw-ldemo-xgn-d-euw-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/benchmark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"    import struct\r\n",
					"    from sqlalchemy import create_engine, event\r\n",
					"    from sqlalchemy.engine.url import URL\r\n",
					"    import pandas as pd"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"SQL_COPT_SS_ACCESS_TOKEN = 1256  # Connection option for access tokens, as defined in msodbcsql.h\r\n",
					"\r\n",
					"connection_string = \"mssql+pyodbc://sql-ldemo-xgn-d-euw-01.database.windows.net/datastore?driver=ODBC+Driver+18+for+SQL+Server\"\r\n",
					"engine = create_engine(connection_string)\r\n",
					"\r\n",
					"@event.listens_for(engine, \"do_connect\")\r\n",
					"def provide_token(dialect, conn_rec, cargs, cparams):\r\n",
					"    # remove the \"Trusted_Connection\" parameter that SQLAlchemy adds\r\n",
					"    cargs[0] = cargs[0].replace(\";Trusted_Connection=Yes\", \"\")\r\n",
					"    # getting token from Linked Service and add it to the struct\r\n",
					"    raw_token = TokenLibrary.getConnectionString(\"LS_DATASTORE\")\r\n",
					"    exptoken = b'';\r\n",
					"    for i in bytes(raw_token, \"UTF-8\"):\r\n",
					"        exptoken += bytes({i})\r\n",
					"        exptoken += bytes(1)\r\n",
					"    token_struct = struct.pack(\"=i\", len(exptoken)) + exptoken\r\n",
					"    # token_struct = struct.pack(f\"<I{len(raw_token)}s\", len(raw_token), token)\r\n",
					"    # apply it to keyword arguments\r\n",
					"    cparams[\"attrs_before\"] = {SQL_COPT_SS_ACCESS_TOKEN: token_struct}"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"query = 'SELECT 1'\r\n",
					"dfsql = pd.read_sql(query, engine)\r\n",
					"print(dfsql)"
				],
				"execution_count": 27
			}
		]
	}
}